const fs = require('fs');
const path = require('path');
const Web3 = require('web3');
const snarkjs = require('snarkjs');


// Connect to a local Ethereum node (replace with your actual provider)
const web3 = new Web3('http://localhost:8545');

// Replace with your deployed contract ABI
const contractABI = [
  {
    "inputs": [
      {
        "internalType": "uint256",
        "name": "",
        "type": "uint256"
      }
    ],
    "name": "proofA",
    "outputs": [
      {
        "internalType": "uint256",
        "name": "",
        "type": "uint256"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "uint256",
        "name": "",
        "type": "uint256"
      },
      {
        "internalType": "uint256",
        "name": "",
        "type": "uint256"
      }
    ],
    "name": "proofB",
    "outputs": [
      {
        "internalType": "uint256",
        "name": "",
        "type": "uint256"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "uint256",
        "name": "",
        "type": "uint256"
      }
    ],
    "name": "proofC",
    "outputs": [
      {
        "internalType": "uint256",
        "name": "",
        "type": "uint256"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "uint256",
        "name": "",
        "type": "uint256"
      }
    ],
    "name": "pubSignals",
    "outputs": [
      {
        "internalType": "uint256",
        "name": "",
        "type": "uint256"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "uint256[2]",
        "name": "_proofA",
        "type": "uint256[2]"
      },
      {
        "internalType": "uint256[2][2]",
        "name": "_proofB",
        "type": "uint256[2][2]"
      },
      {
        "internalType": "uint256[2]",
        "name": "_proofC",
        "type": "uint256[2]"
      },
      {
        "internalType": "uint256[2]",
        "name": "_pubSignals",
        "type": "uint256[2]"
      }
    ],
    "name": "updateProof",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "getProof",
    "outputs": [
      {
        "internalType": "uint256[2]",
        "name": "",
        "type": "uint256[2]"
      },
      {
        "internalType": "uint256[2][2]",
        "name": "",
        "type": "uint256[2][2]"
      },
      {
        "internalType": "uint256[2]",
        "name": "",
        "type": "uint256[2]"
      },
      {
        "internalType": "uint256[2]",
        "name": "",
        "type": "uint256[2]"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "uint256",
        "name": "_code",
        "type": "uint256"
      }
    ],
    "name": "setVerificationCode",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "uint256",
        "name": "_code",
        "type": "uint256"
      }
    ],
    "name": "verifyCode",
    "outputs": [
      {
        "internalType": "bool",
        "name": "",
        "type": "bool"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "uint256[2]",
        "name": "_pA",
        "type": "uint256[2]"
      },
      {
        "internalType": "uint256[2][2]",
        "name": "_pB",
        "type": "uint256[2][2]"
      },
      {
        "internalType": "uint256[2]",
        "name": "_pC",
        "type": "uint256[2]"
      },
      {
        "internalType": "uint256[2]",
        "name": "_pubSignals",
        "type": "uint256[2]"
      }
    ],
    "name": "verifyProof",
    "outputs": [
      {
        "internalType": "bool",
        "name": "",
        "type": "bool"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  }
];

const newLocal = "";
const contractBytecode = newLocal;

// Create a contract instance without bytecode
async function groth16Verify(r1csFilename, wtnsFilename) {
  accountNumber = '0x4c99A3D5D404C6f7F4Db4c39a564c1cC4691a241';
  try {
    const ptauFilename = path.join("./", "pot14_final.ptau");

    // Generate Groth16 proof

    const { proof, publicSignals } =
    await snarkjs.groth16.fullProve({ "age": "20", "rand": "1" }, "./circuit_js/circuit.wasm", "./circuit_final.zkey");

    const contractInstance = new web3.eth.Contract(contractABI);
    const deployedContract = await contractInstance.deploy({
      data: contractBytecode,
     }).send({
        from: accountNumber,
        gas: '4700000', // Ajustez la limite de gaz selon les besoins
    });


    const proofA = [proof.pi_a[0], proof.pi_a[1]];
    const proofB = [
      [proof.pi_b[0][1], proof.pi_b[0][0]],
      [proof.pi_b[1][1], proof.pi_b[1][0]],
    ];
    const proofC = [proof.pi_c[0], proof.pi_c[1]];

    // Call the verification function on the smart contract
    await deployedContract.methods.updateProof(proofA, proofB, proofC, publicSignals).send({
      from: accountNumber,
      gas: '4700000', // Adjust the gas limit as needed
    });

    const test= await deployedContract.methods.getProof().call({
      from: accountNumber,
      gas: '4700000', // Adjust the gas limit as needed
    });

    const pA = test[0];
    const pB = test[1];
    const pC = test[2];
    const pbSignals = test[3];

    const result = await deployedContract.methods.verifyProof(pA, pB, pC, pbSignals).call({
      from: accountNumber,
      gas: '4700000', // Adjust the gas limit as needed
    });

    if (JSON.stringify(pbSignals).includes('0')) {
      console.log("There is at least one '0' in pbSignals.");//ajout de cette ligne pour indiquer s'il y a un '0' dans pbSignals
    } 

    // Perform assertions based on the verification result
    console.log('Verification Result:', result);
  } catch (error) {
    console.error('Error:', error);
  }
}

// Replace these with your actual file paths
const r1csFilename = './circuit.r1cs';
const wtnsFilename = './witness.wtns';

// Call the Groth16 verification function
groth16Verify(r1csFilename, wtnsFilename);
